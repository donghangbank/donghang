stages:
  - check_infrastructure
  - check_frontend
  - build_backend
  - aws_ecr_login

check_infrastructure:
  stage: check_infrastructure
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
      changes:
        - infrastructure/**/*
  image:
    name: hashicorp/terraform:latest
    entrypoint: [ "" ]
  script:
    - terraform fmt -recursive -check
    - terraform validate
  allow_failure: false

check_frontend:
  stage: check_frontend
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
      changes:
        - frontend/**/*
      when: always
  image: node:22.14.0-alpine
  cache:
    paths:
      - frontend/node_modules
    key: $CI_PROJECT_NAME-frontend-cache
  before_script:
    - cd frontend
    - npm ci
  script:
    - npm run lint
    - npm run format

build_backend:
  stage: build_backend
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
      changes:
        - backend/**/*
      when: always
  image: amazoncorretto:17-alpine-jdk
  cache:
    paths:
      - backend/.gradle/
      - backend/build/
    key: $CI_PROJECT_NAME-backend-cache
  before_script:
    - cd backend
    - cp $BE_ENV_FILE dev.env
    - cp $BE_TEST_ENV_FILE test.env
  script:
    - chmod +x ./gradlew
    - ./gradlew build --build-cache -Dspring.profiles.active=dev

aws_ecr_login:
  stage: aws_ecr_login
  rules:
    - if: '$CI_COMMIT_BRANCH =~ /^release.*/'
  image:
    name: amazon/aws-cli
    entrypoint: [ "" ]
  variables:
    AWS_ACCESS_KEY_ID: $AWS_ECR_ACCESS_KEY_ID
    AWS_SECRET_ACCESS_KEY: $AWS_ECR_SECRET_KEY
    AWS_DEFAULT_REGION: $AWS_DEFAULT_REGION
  script:
    - aws ecr get-login-password --region $AWS_DEFAULT_REGION >> password.txt
  artifacts:
    paths:
      - password.txt
