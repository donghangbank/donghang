plugins {
	id 'java'
	id 'org.springframework.boot' version '3.4.3'
	id 'io.spring.dependency-management' version '1.1.7'
	id 'org.asciidoctor.jvm.convert' version '3.3.2'
}

group = 'bank.donghang'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

configurations {
	asciidoctorExt
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

var querydslDir = file("build/generated/querydsl")

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-data-redis'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'com.mysql:mysql-connector-j'
	runtimeOnly 'com.h2database:h2'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

	// Spring REST Docs
	asciidoctorExt 'org.springframework.restdocs:spring-restdocs-asciidoctor'
	testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'

	// Querydsl dependencies
	implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
	annotationProcessor 'com.querydsl:querydsl-apt:5.0.0:jakarta'
	annotationProcessor 'jakarta.persistence:jakarta.persistence-api'

	//s3
	implementation("software.amazon.awssdk.crt:aws-crt:0.33.2")
	implementation("io.awspring.cloud:spring-cloud-aws-starter-s3:3.1.1")
	implementation("software.amazon.awssdk:s3:2.29.18")
}

ext {
	snippetsDir = file('build/generated-snippets')
}

asciidoctor {
	inputs.dir snippetsDir
	baseDirFollowsSourceFile()
	configurations 'asciidoctorExt'
	dependsOn test
}

tasks.named('test') {
	useJUnitPlatform()
	outputs.dir snippetsDir
}

asciidoctor.doFirst {
	delete file('src/main/resources/static/docs')
}

tasks.register('copyDocument', Copy) {
	dependsOn asciidoctor
	from file("build/docs/asciidoc")
	into file("src/main/resources/static/docs")
}

build {
	dependsOn copyDocument
}

tasks.named('compileJava') {
	doLast {
		println("Querydsl QClasses will be generated in: ${file('build/generated/querydsl')}")
	}
}

tasks.compileJava {
	options.annotationProcessorGeneratedSourcesDirectory = querydslDir
}

sourceSets {
	main {
		java {
			srcDir querydslDir
		}
	}
}